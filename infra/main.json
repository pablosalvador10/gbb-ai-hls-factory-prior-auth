{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.32.4.45862",
      "templateHash": "9684475916329380272"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment that can be used as part of naming resource convention"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "streamlitExists": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Flag to indicate if Streamlit app image exists. This is managed by AZD"
      }
    },
    "cosmosAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for the cluster"
      }
    },
    "priorAuthName": {
      "type": "string",
      "defaultValue": "priorAuth",
      "minLength": 2,
      "maxLength": 12,
      "metadata": {
        "description": "Name for the PriorAuth resource and used to derive the name of dependent resources."
      }
    },
    "acrContainerImage": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "ACR container image url"
      }
    },
    "acrUsername": {
      "type": "securestring",
      "defaultValue": "",
      "minLength": 0,
      "metadata": {
        "description": "Admin user for the ACR registry of the container image"
      }
    },
    "acrPassword": {
      "type": "securestring",
      "defaultValue": "",
      "minLength": 0,
      "metadata": {
        "description": "Admin password for the ACR registry of the container image"
      }
    },
    "openAiApiVersion": {
      "type": "string",
      "defaultValue": "2024-08-01-preview",
      "metadata": {
        "description": "API Version of the OpenAI API"
      }
    },
    "chatCompletionModels": {
      "type": "array",
      "defaultValue": [
        {
          "name": "gpt-4o",
          "version": "2024-08-06",
          "skuName": "GlobalStandard",
          "capacity": 25
        }
      ],
      "metadata": {
        "description": "List of completion models to be deployed to the OpenAI account."
      }
    },
    "embeddingModel": {
      "type": "object",
      "defaultValue": {
        "name": "text-embedding-3-large",
        "version": "1",
        "skuName": "Standard",
        "capacity": 16
      },
      "metadata": {
        "description": "List of embedding models to be deployed to the OpenAI account."
      }
    },
    "embeddingModelDimension": {
      "type": "string",
      "defaultValue": "1536",
      "metadata": {
        "description": "Embedding model size for the OpenAI Embedding deployment"
      }
    },
    "storageBlobContainerName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Storage Blob Container name to land the files for Prior Auth"
      }
    }
  },
  "variables": {
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "resources",
      "resourceGroup": "[format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[variables('tags')]"
          },
          "cosmosAdministratorPassword": {
            "value": "[parameters('cosmosAdministratorPassword')]"
          },
          "streamlitExists": {
            "value": "[parameters('streamlitExists')]"
          },
          "priorAuthName": {
            "value": "[parameters('priorAuthName')]"
          },
          "acrContainerImage": {
            "value": "[parameters('acrContainerImage')]"
          },
          "acrUsername": {
            "value": "[parameters('acrUsername')]"
          },
          "acrPassword": {
            "value": "[parameters('acrPassword')]"
          },
          "openAiApiVersion": {
            "value": "[parameters('openAiApiVersion')]"
          },
          "chatCompletionModels": {
            "value": "[parameters('chatCompletionModels')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingModelDimension": {
            "value": "[parameters('embeddingModelDimension')]"
          },
          "storageBlobContainerName": {
            "value": "[parameters('storageBlobContainerName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "14130350007591952049"
            }
          },
          "parameters": {
            "priorAuthName": {
              "type": "string",
              "defaultValue": "priorAuth",
              "minLength": 2,
              "maxLength": 12,
              "metadata": {
                "description": "Name for the PriorAuth resource and used to derive the name of dependent resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Set of tags to apply to all resources."
              }
            },
            "acrContainerImage": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "ACR container image url"
              }
            },
            "acrUsername": {
              "type": "securestring",
              "defaultValue": "",
              "minLength": 0,
              "metadata": {
                "description": "Admin user for the ACR registry of the container image"
              }
            },
            "acrPassword": {
              "type": "securestring",
              "defaultValue": "",
              "minLength": 0,
              "metadata": {
                "description": "Admin password for the ACR registry of the container image"
              }
            },
            "streamlitExists": {
              "type": "bool",
              "defaultValue": false
            },
            "cosmosAdministratorPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Admin password for the cluster"
              }
            },
            "openAiApiVersion": {
              "type": "string",
              "defaultValue": "2024-08-01-preview",
              "metadata": {
                "description": "API Version of the OpenAI API"
              }
            },
            "chatCompletionModels": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "gpt-4o",
                  "version": "2024-08-06",
                  "skuName": "GlobalStandard",
                  "capacity": 25
                }
              ],
              "metadata": {
                "description": "List of completion models to be deployed to the OpenAI account."
              }
            },
            "embeddingModel": {
              "type": "object",
              "defaultValue": {
                "name": "text-embedding-ada-002",
                "version": "2",
                "skuName": "Standard",
                "capacity": 16
              },
              "metadata": {
                "description": "List of embedding models to be deployed to the OpenAI account."
              }
            },
            "embeddingModelDimension": {
              "type": "string",
              "defaultValue": "1536",
              "metadata": {
                "description": "Embedding model size for the OpenAI Embedding deployment"
              }
            },
            "storageBlobContainerName": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Storage Blob Container name to land the files for Prior Auth"
              }
            }
          },
          "variables": {
            "name": "[toLower(format('{0}', parameters('priorAuthName')))]",
            "uniqueSuffix": "[substring(uniqueString(resourceGroup().id), 0, 7)]",
            "storageServiceName": "[toLower(replace(format('storage-{0}-{1}', variables('name'), variables('uniqueSuffix')), '-', ''))]",
            "location": "[resourceGroup().location]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), 'Storage Blob Data Reader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceIdentityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), 'Storage Blob Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')), 'Storage Blob Data Reader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('doc-intelligence-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "S0"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "11280015064312466536"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the AI service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "S0"
                      ],
                      "metadata": {
                        "description": "AI service SKU"
                      }
                    }
                  },
                  "variables": {
                    "aiServiceNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('aiServiceNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "AIServices",
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "disableLocalAuth": false,
                        "apiProperties": {
                          "statisticsEnabled": false
                        },
                        "customSubDomainName": "[variables('aiServiceNameCleaned')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "aiServicesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').endpoint]"
                    },
                    "aiServiceDocIntelligenceEndpoint": {
                      "type": "string",
                      "value": "[format('https://{0}.cognitiveservices.azure.com/', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesName": {
                      "type": "string",
                      "value": "[variables('aiServiceNameCleaned')]"
                    },
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01', 'full').identity.principalId]"
                    },
                    "aiServicesKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('multiservice-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "S0"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "8599590155065121019"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the AI service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "S0"
                      ],
                      "metadata": {
                        "description": "AI service SKU"
                      }
                    }
                  },
                  "variables": {
                    "aiServiceNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('aiServiceNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "CognitiveServices",
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "disableLocalAuth": false,
                        "apiProperties": {
                          "statisticsEnabled": false
                        },
                        "customSubDomainName": "[variables('aiServiceNameCleaned')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "aiServicesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').endpoint]"
                    },
                    "aiServicesName": {
                      "type": "string",
                      "value": "[variables('aiServiceNameCleaned')]"
                    },
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01', 'full').identity.principalId]"
                    },
                    "aiServicesPrimaryKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('openai-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "S0"
                  },
                  "embeddingModel": {
                    "value": "[parameters('embeddingModel')]"
                  },
                  "chatCompletionModels": {
                    "value": "[parameters('chatCompletionModels')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "7338189086510205370"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the AI service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "S0"
                      ],
                      "metadata": {
                        "description": "AI service SKU"
                      }
                    },
                    "chatCompletionModels": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "name": "gpt-4o",
                          "version": "2024-08-06",
                          "skuName": "GlobalStandard",
                          "capacity": 25
                        }
                      ],
                      "metadata": {
                        "description": "List of chat completion models to be deployed to the OpenAI account."
                      }
                    },
                    "embeddingModel": {
                      "type": "object",
                      "defaultValue": {
                        "name": "text-embedding-ada-002",
                        "version": "2",
                        "skuName": "Standard",
                        "capacity": 16
                      },
                      "metadata": {
                        "description": "List of embedding models to be deployed to the OpenAI account."
                      }
                    }
                  },
                  "variables": {
                    "combinedModels": "[concat(parameters('chatCompletionModels'), createArray(parameters('embeddingModel')))]",
                    "aiServiceNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('aiServiceNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "OpenAI",
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "disableLocalAuth": false,
                        "apiProperties": {
                          "statisticsEnabled": false
                        },
                        "customSubDomainName": "[variables('aiServiceNameCleaned')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "modelDeployments",
                        "count": "[length(variables('combinedModels'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', variables('aiServiceNameCleaned'), format('{0}', variables('combinedModels')[copyIndex()].name))]",
                      "sku": {
                        "name": "[variables('combinedModels')[copyIndex()].skuName]",
                        "capacity": "[variables('combinedModels')[copyIndex()].capacity]"
                      },
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[variables('combinedModels')[copyIndex()].name]",
                          "version": "[variables('combinedModels')[copyIndex()].version]"
                        },
                        "currentCapacity": "[variables('combinedModels')[copyIndex()].capacity]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "aiServicesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned'))]"
                    },
                    "aiServicesEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').endpoint]"
                    },
                    "aiServicesName": {
                      "type": "string",
                      "value": "[variables('aiServiceNameCleaned')]"
                    },
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01', 'full').identity.principalId]"
                    },
                    "aiServicesKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServiceNameCleaned')), '2023-05-01').key1]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('search-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "basic"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "12701596295264348816"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Search service"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "basic",
                      "allowedValues": [
                        "basic"
                      ],
                      "metadata": {
                        "description": "Search service SKU"
                      }
                    }
                  },
                  "variables": {
                    "searchNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Search/searchServices",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[variables('searchNameCleaned')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "publicNetworkAccess": "Enabled",
                        "hostingMode": "default"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "searchServiceIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Search/searchServices', variables('searchNameCleaned')), '2024-06-01-preview', 'full').identity.principalId]"
                    },
                    "searchServiceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Search/searchServices', variables('searchNameCleaned'))]"
                    },
                    "searchServiceName": {
                      "type": "string",
                      "value": "[variables('searchNameCleaned')]"
                    },
                    "searchServicePrimaryKey": {
                      "type": "string",
                      "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('searchNameCleaned')), '2024-06-01-preview').primaryKey]"
                    },
                    "searchServiceEndpoint": {
                      "type": "string",
                      "value": "[format('https://{0}.search.windows.net', variables('searchNameCleaned'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[variables('storageServiceName')]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "aiServiceSkuName": {
                    "value": "Standard_LRS"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "2638028766387297602"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Storage account"
                      }
                    },
                    "aiServiceSkuName": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS"
                      ],
                      "metadata": {
                        "description": "Storage SKU"
                      }
                    }
                  },
                  "variables": {
                    "storageNameCleaned": "[toLower(replace(parameters('aiServiceName'), '-', ''))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-05-01",
                      "name": "[take(variables('storageNameCleaned'), 24)]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('aiServiceSkuName')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "minimumTlsVersion": "TLS1_2",
                        "publicNetworkAccess": "Enabled",
                        "supportsHttpsTrafficOnly": true,
                        "defaultToOAuthAuthentication": true
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', take(variables('storageNameCleaned'), 24), 'default')]",
                      "properties": {
                        "deleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}/{2}', take(variables('storageNameCleaned'), 24), 'default', 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', take(variables('storageNameCleaned'), 24), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}/{2}', take(variables('storageNameCleaned'), 24), 'default', 'pre-auth-policies')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', take(variables('storageNameCleaned'), 24), 'default')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageAccountId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24))]"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "value": "[take(variables('storageNameCleaned'), 24)]"
                    },
                    "storageAccountPrimaryKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24)), '2023-05-01').keys[0].value]"
                    },
                    "storageAccountPrimaryConnectionString": {
                      "type": "string",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', take(variables('storageNameCleaned'), 24), listKeys(resourceId('Microsoft.Storage/storageAccounts', take(variables('storageNameCleaned'), 24)), '2023-05-01').keys[0].value)]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('appinsights-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('appinsights-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "1616037799791107472"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Application Insights resource"
                      }
                    }
                  },
                  "variables": {
                    "appInsightsNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[variables('appInsightsNameCleaned')]",
                      "location": "[parameters('location')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "appInsightsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/components', variables('appInsightsNameCleaned'))]"
                    },
                    "appInsightsName": {
                      "type": "string",
                      "value": "[variables('appInsightsNameCleaned')]"
                    },
                    "appInsightsConnectionString": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsNameCleaned')), '2020-02-02').ConnectionString]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "aiServiceName": {
                    "value": "[format('cosmosdb-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "cosmosAdministratorPassword": {
                    "value": "[parameters('cosmosAdministratorPassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "2923483620102362513"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "aiServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Mongo cluster"
                      }
                    },
                    "cosmosAdministratorUsername": {
                      "type": "string",
                      "defaultValue": "adminuser",
                      "metadata": {
                        "description": "Administrator username for the Mongo cluster"
                      }
                    },
                    "cosmosAdministratorPassword": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Admin password for the cluster"
                      }
                    }
                  },
                  "variables": {
                    "mongoNameCleaned": "[replace(parameters('aiServiceName'), '-', '')]",
                    "encodedPassword": "[uriComponent(parameters('cosmosAdministratorPassword'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/mongoClusters",
                      "apiVersion": "2024-07-01",
                      "name": "[variables('mongoNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "administrator": {
                          "userName": "[parameters('cosmosAdministratorUsername')]",
                          "password": "[parameters('cosmosAdministratorPassword')]"
                        },
                        "serverVersion": "7.0",
                        "compute": {
                          "tier": "M30"
                        },
                        "storage": {
                          "sizeGb": 32
                        },
                        "sharding": {
                          "shardCount": 1
                        },
                        "highAvailability": {
                          "targetMode": "Disabled"
                        },
                        "publicNetworkAccess": "Enabled",
                        "previewFeatures": [
                          "GeoReplicas"
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "mongoClusterId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/mongoClusters', variables('mongoNameCleaned'))]"
                    },
                    "mongoClusterName": {
                      "type": "string",
                      "value": "[variables('mongoNameCleaned')]"
                    },
                    "mongoConnectionString": {
                      "type": "string",
                      "value": "[format('mongodb+srv://{0}:{1}@{2}.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000', parameters('cosmosAdministratorUsername'), variables('encodedPassword'), variables('mongoNameCleaned'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('loganalytics-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsName": {
                    "value": "[format('loganalytics-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "9834807852717270523"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "logAnalyticsName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Log Analytics Workspace"
                      }
                    }
                  },
                  "variables": {
                    "logAnalyticsCleaned": "[replace(parameters('logAnalyticsName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2020-08-01",
                      "name": "[variables('logAnalyticsCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "sku": {
                          "name": "PerGB2018"
                        },
                        "retentionInDays": 30,
                        "workspaceCapping": {}
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsCleaned'))]"
                    },
                    "logAnalyticsName": {
                      "type": "string",
                      "value": "[variables('logAnalyticsCleaned')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('uai-app-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "998408512764899332"
                    },
                    "name": "User Assigned Identities",
                    "description": "This module deploys a User Assigned Identity.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "federatedIdentityCredentialsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the federated identity credential."
                            }
                          },
                          "audiences": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. The list of audiences that can appear in the issued token."
                            }
                          },
                          "issuer": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The URL of the issuer to be trusted."
                            }
                          },
                          "subject": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The identifier of the external identity."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the User Assigned Identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "federatedIdentityCredentials": {
                      "$ref": "#/definitions/federatedIdentityCredentialsType",
                      "metadata": {
                        "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.2.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "userAssignedIdentity": {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    "userAssignedIdentity_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_roleAssignments": {
                      "copy": {
                        "name": "userAssignedIdentity_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_federatedIdentityCredentials": {
                      "copy": {
                        "name": "userAssignedIdentity_federatedIdentityCredentials",
                        "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[parameters('name')]"
                          },
                          "audiences": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                          },
                          "issuer": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                          },
                          "subject": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4317497001099502136"
                            },
                            "name": "User Assigned Identity Federated Identity Credential",
                            "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "userAssignedIdentityName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "audiences": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                              }
                            },
                            "issuer": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                              }
                            },
                            "subject": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                              "apiVersion": "2023-01-31",
                              "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                              "properties": {
                                "audiences": "[parameters('audiences')]",
                                "issuer": "[parameters('issuer')]",
                                "subject": "[parameters('subject')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the federated identity credential."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the federated identity credential."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the federated identity credential was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned identity."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID (object ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').principalId]"
                    },
                    "clientId": {
                      "type": "string",
                      "metadata": {
                        "description": "The client ID (application ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').clientId]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the user assigned identity was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[toLower(replace(format('registry-{0}-{1}', variables('name'), variables('uniqueSuffix')), '-', ''))]"
                  },
                  "acrAdminUserEnabled": {
                    "value": false
                  },
                  "publicNetworkAccess": {
                    "value": "Enabled"
                  },
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "roleAssignments": {
                    "value": [
                      {
                        "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionIdOrName": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "14346813384269118868"
                    },
                    "name": "Azure Container Registries (ACR)",
                    "description": "This module deploys an Azure Container Registry (ACR).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "service": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                            }
                          },
                          "privateDnsZoneResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint ip address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private ip addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private ip address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "manualPrivateLinkServiceConnections": {
                            "type": "array",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Manual PrivateLink Service Connections."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customerManagedKeyType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                          }
                        },
                        "keyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the customer managed key to use for encryption."
                          }
                        },
                        "keyVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                          }
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 5,
                      "maxLength": 50,
                      "metadata": {
                        "description": "Required. Name of your Azure Container Registry."
                      }
                    },
                    "acrAdminUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable admin user that have push / pull permission to the registry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "acrSku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Premium",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of your Azure container registry."
                      }
                    },
                    "exportPolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the export policy is enabled or not."
                      }
                    },
                    "quarantinePolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the quarantine policy is enabled or not."
                      }
                    },
                    "trustPolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the trust policy is enabled or not."
                      }
                    },
                    "retentionPolicyStatus": {
                      "type": "string",
                      "defaultValue": "enabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the retention policy is enabled or not."
                      }
                    },
                    "retentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 15,
                      "metadata": {
                        "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                      }
                    },
                    "azureADAuthenticationAsArmPolicyStatus": {
                      "type": "string",
                      "defaultValue": "enabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. The value that indicates whether the policy for using ARM audience token for a container registr is enabled or not. Default is enabled."
                      }
                    },
                    "softDeletePolicyStatus": {
                      "type": "string",
                      "defaultValue": "disabled",
                      "allowedValues": [
                        "disabled",
                        "enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Soft Delete policy status. Default is disabled."
                      }
                    },
                    "softDeletePolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "metadata": {
                        "description": "Optional. The number of days after which a soft-deleted item is permanently deleted."
                      }
                    },
                    "dataEndpointEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access. Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkRuleSetIpRules are not set.  Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "networkRuleBypassOptions": {
                      "type": "string",
                      "defaultValue": "AzureServices",
                      "allowedValues": [
                        "AzureServices",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
                      }
                    },
                    "networkRuleSetDefaultAction": {
                      "type": "string",
                      "defaultValue": "Deny",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Optional. The default action of allow or deny when no other rules match."
                      }
                    },
                    "networkRuleSetIpRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The IP ACL rules. Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'acrSku' to be 'Premium'."
                      }
                    },
                    "zoneRedundancy": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                      }
                    },
                    "replications": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All replications to create."
                      }
                    },
                    "webhooks": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All webhooks to create."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "anonymousPullEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables registry-wide pull from unauthenticated clients. It's in preview and available in the Standard and Premium service tiers."
                      }
                    },
                    "customerManagedKey": {
                      "$ref": "#/definitions/customerManagedKeyType",
                      "metadata": {
                        "description": "Optional. The customer managed key definition."
                      }
                    },
                    "cacheRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of Cache Rules. Note: This is a preview feature ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache#cache-for-acr-preview))."
                      }
                    }
                  },
                  "variables": {
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                      "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                      "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                      "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                      "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "cMKKeyVault::cMKKey": {
                      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2023-02-01",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                      "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
                      "dependsOn": [
                        "cMKKeyVault"
                      ]
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.containerregistry-registry.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "cMKKeyVault": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
                    },
                    "cMKUserAssignedIdentity": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
                    },
                    "registry": {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2023-06-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('acrSku')]"
                      },
                      "properties": {
                        "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                        "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('status', 'enabled', 'keyVaultProperties', createObject('identity', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyIdentifier', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, parameters('customerManagedKey').keyVersion), reference('cMKKeyVault::cMKKey').keyUriWithVersion))), null())]",
                        "policies": {
                          "azureADAuthenticationAsArmPolicy": {
                            "status": "[parameters('azureADAuthenticationAsArmPolicyStatus')]"
                          },
                          "exportPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('exportPolicyStatus')), null())]",
                          "quarantinePolicy": {
                            "status": "[parameters('quarantinePolicyStatus')]"
                          },
                          "trustPolicy": {
                            "type": "Notary",
                            "status": "[parameters('trustPolicyStatus')]"
                          },
                          "retentionPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('days', parameters('retentionPolicyDays'), 'status', parameters('retentionPolicyStatus')), null())]",
                          "softDeletePolicy": {
                            "retentionDays": "[parameters('softDeletePolicyDays')]",
                            "status": "[parameters('softDeletePolicyStatus')]"
                          }
                        },
                        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSetIpRules'))), 'Disabled', null()))]",
                        "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                        "networkRuleSet": "[if(not(empty(parameters('networkRuleSetIpRules'))), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', parameters('networkRuleSetIpRules')), null())]",
                        "zoneRedundancy": "[if(equals(parameters('acrSku'), 'Premium'), parameters('zoneRedundancy'), null())]"
                      },
                      "dependsOn": [
                        "cMKKeyVault",
                        "cMKUserAssignedIdentity"
                      ]
                    },
                    "registry_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_diagnosticSettings": {
                      "copy": {
                        "name": "registry_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_roleAssignments": {
                      "copy": {
                        "name": "registry_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_replications": {
                      "copy": {
                        "name": "registry_replications",
                        "count": "[length(coalesce(parameters('replications'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Registry-Replication-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].name]"
                          },
                          "registryName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].location]"
                          },
                          "regionEndpointEnabled": {
                            "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'regionEndpointEnabled')]"
                          },
                          "zoneRedundancy": {
                            "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'zoneRedundancy')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "10714256463183699741"
                            },
                            "name": "Azure Container Registry (ACR) Replications",
                            "description": "This module deploys an Azure Container Registry (ACR) Replication.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "registryName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the replication."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "regionEndpointEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies whether the replication regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications."
                              }
                            },
                            "zoneRedundancy": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                              }
                            }
                          },
                          "resources": {
                            "registry": {
                              "existing": true,
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('registryName')]"
                            },
                            "replication": {
                              "type": "Microsoft.ContainerRegistry/registries/replications",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "regionEndpointEnabled": "[parameters('regionEndpointEnabled')]",
                                "zoneRedundancy": "[parameters('zoneRedundancy')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the replication."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the replication."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries/replications', parameters('registryName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the replication was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('replication', '2023-06-01-preview', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_cacheRules": {
                      "copy": {
                        "name": "registry_cacheRules",
                        "count": "[length(coalesce(parameters('cacheRules'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Registry-Cache-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "registryName": {
                            "value": "[parameters('name')]"
                          },
                          "sourceRepository": {
                            "value": "[coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository]"
                          },
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'name'), replace(replace(coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository, '/', '-'), '.', '-'))]"
                          },
                          "targetRepository": {
                            "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'targetRepository'), coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository)]"
                          },
                          "credentialSetResourceId": {
                            "value": "[tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'credentialSetResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6942960102258463312"
                            },
                            "name": "Container Registries Cache",
                            "description": "Cache for Azure Container Registry (Preview) feature allows users to cache container images in a private container registry. Cache for ACR, is a preview feature available in Basic, Standard, and Premium service tiers ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache)).",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "registryName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent registry. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[replace(replace(parameters('sourceRepository'), '/', '-'), '.', '-')]",
                              "metadata": {
                                "description": "Optional. The name of the cache rule. Will be dereived from the source repository name if not defined."
                              }
                            },
                            "sourceRepository": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Source repository pulled from upstream."
                              }
                            },
                            "targetRepository": {
                              "type": "string",
                              "defaultValue": "[parameters('sourceRepository')]",
                              "metadata": {
                                "description": "Optional. Target repository specified in docker pull command. E.g.: docker pull myregistry.azurecr.io/{targetRepository}:{tag}."
                              }
                            },
                            "credentialSetResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the credential store which is associated with the cache rule."
                              }
                            }
                          },
                          "resources": {
                            "registry": {
                              "existing": true,
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('registryName')]"
                            },
                            "cacheRule": {
                              "type": "Microsoft.ContainerRegistry/registries/cacheRules",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                              "properties": {
                                "sourceRepository": "[parameters('sourceRepository')]",
                                "targetRepository": "[parameters('targetRepository')]",
                                "credentialSetResourceId": "[parameters('credentialSetResourceId')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the Cache Rule."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Cache Rule."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Cache Rule."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries/cacheRules', parameters('registryName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_webhooks": {
                      "copy": {
                        "name": "registry_webhooks",
                        "count": "[length(coalesce(parameters('webhooks'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Registry-Webhook-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].name]"
                          },
                          "registryName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'location'), parameters('location'))]"
                          },
                          "action": {
                            "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'action'), createArray('chart_delete', 'chart_push', 'delete', 'push', 'quarantine'))]"
                          },
                          "customHeaders": {
                            "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'customHeaders')]"
                          },
                          "scope": {
                            "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'scope')]"
                          },
                          "status": {
                            "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'status')]"
                          },
                          "serviceUri": {
                            "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].serviceUri]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "3986666280667981658"
                            },
                            "name": "Azure Container Registry (ACR) Webhooks",
                            "description": "This module deploys an Azure Container Registry (ACR) Webhook.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "registryName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}webhook', parameters('registryName'))]",
                              "minLength": 5,
                              "maxLength": 50,
                              "metadata": {
                                "description": "Optional. The name of the registry webhook."
                              }
                            },
                            "serviceUri": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The service URI for the webhook to post notifications."
                              }
                            },
                            "status": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The status of the webhook at the time the operation was called."
                              }
                            },
                            "action": {
                              "type": "array",
                              "defaultValue": [
                                "chart_delete",
                                "chart_push",
                                "delete",
                                "push",
                                "quarantine"
                              ],
                              "metadata": {
                                "description": "Optional. The list of actions that trigger the webhook to post notifications."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "customHeaders": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom headers that will be added to the webhook notifications."
                              }
                            },
                            "scope": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events."
                              }
                            }
                          },
                          "resources": {
                            "registry": {
                              "existing": true,
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('registryName')]"
                            },
                            "webhook": {
                              "type": "Microsoft.ContainerRegistry/registries/webhooks",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "actions": "[parameters('action')]",
                                "customHeaders": "[parameters('customHeaders')]",
                                "scope": "[parameters('scope')]",
                                "serviceUri": "[parameters('serviceUri')]",
                                "status": "[parameters('status')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the webhook."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries/webhooks', parameters('registryName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the webhook."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure container registry."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "actions": {
                              "type": "array",
                              "metadata": {
                                "description": "The actions of the webhook."
                              },
                              "value": "[reference('webhook').actions]"
                            },
                            "status": {
                              "type": "string",
                              "metadata": {
                                "description": "The status of the webhook."
                              },
                              "value": "[reference('webhook').status]"
                            },
                            "provistioningState": {
                              "type": "string",
                              "metadata": {
                                "description": "The provisioning state of the webhook."
                              },
                              "value": "[reference('webhook').provisioningState]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('webhook', '2023-06-01-preview', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    },
                    "registry_privateEndpoints": {
                      "copy": {
                        "name": "registry_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-registry-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateLinkServiceConnections": {
                            "value": [
                              {
                                "name": "[parameters('name')]",
                                "properties": {
                                  "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
                                  "groupIds": [
                                    "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry')]"
                                  ]
                                }
                              }
                            ]
                          },
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex()))]"
                          },
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroupName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                          },
                          "privateDnsZoneResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "manualPrivateLinkServiceConnections": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections')]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.23.1.45101",
                              "templateHash": "2821141217598568122"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                              }
                            },
                            "privateDnsZoneResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.3.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                  },
                                  "privateDNSResourceIds": {
                                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.23.1.45101",
                                      "templateHash": "18168683629401652671"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "registry"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the Azure container registry."
                      },
                      "value": "[parameters('name')]"
                    },
                    "loginServer": {
                      "type": "string",
                      "metadata": {
                        "description": "The reference to the Azure container registry."
                      },
                      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure container registry."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure container registry."
                      },
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('registry', '2023-06-01-preview', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('registry', '2023-06-01-preview', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('containerapp-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[variables('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "streamlitExists": {
                    "value": "[parameters('streamlitExists')]"
                  },
                  "containerAppName": {
                    "value": "[format('pe-fe-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "acrLoginServer": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.loginServer.value]"
                  },
                  "acrContainerImage": {
                    "value": "[parameters('acrContainerImage')]"
                  },
                  "acrUsername": {
                    "value": "[parameters('acrUsername')]"
                  },
                  "acrPassword": {
                    "value": "[parameters('acrPassword')]"
                  },
                  "userAssignedIdentityId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "containerEnvArray": {
                    "value": [
                      {
                        "name": "AZURE_CLIENT_ID",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.clientId.value]"
                      },
                      {
                        "name": "AZURE_OPENAI_KEY",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                      },
                      {
                        "name": "AZURE_OPENAI_ENDPOINT",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
                      },
                      {
                        "name": "AZURE_OPENAI_API_VERSION",
                        "value": "[parameters('openAiApiVersion')]"
                      },
                      {
                        "name": "AZURE_OPENAI_EMBEDDING_DEPLOYMENT",
                        "value": "[parameters('embeddingModel').name]"
                      },
                      {
                        "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_ID",
                        "value": "gpt-4o"
                      },
                      {
                        "name": "AZURE_OPENAI_CHAT_DEPLOYMENT_01",
                        "value": "gpt-4o"
                      },
                      {
                        "name": "AZURE_OPENAI_EMBEDDING_DIMENSIONS",
                        "value": "[parameters('embeddingModelDimension')]"
                      },
                      {
                        "name": "AZURE_SEARCH_SERVICE_NAME",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
                      },
                      {
                        "name": "AZURE_SEARCH_INDEX_NAME",
                        "value": "ai-policies-index"
                      },
                      {
                        "name": "AZURE_AI_SEARCH_ADMIN_KEY",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServicePrimaryKey.value]"
                      },
                      {
                        "name": "AZURE_AI_SEARCH_SERVICE_ENDPOINT",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceEndpoint.value]"
                      },
                      {
                        "name": "AZURE_STORAGE_ACCOUNT_KEY",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountPrimaryKey.value]"
                      },
                      {
                        "name": "AZURE_BLOB_CONTAINER_NAME",
                        "value": "[parameters('storageBlobContainerName')]"
                      },
                      {
                        "name": "AZURE_STORAGE_ACCOUNT_NAME",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                      },
                      {
                        "name": "AZURE_STORAGE_CONNECTION_STRING",
                        "value": "[format('ResourceId={0}', reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountId.value)]"
                      },
                      {
                        "name": "AZURE_AI_SERVICES_KEY",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesPrimaryKey.value]"
                      },
                      {
                        "name": "AZURE_COSMOS_DB_DATABASE_NAME",
                        "value": "priorauthsessions"
                      },
                      {
                        "name": "AZURE_COSMOS_DB_COLLECTION_NAME",
                        "value": "temp"
                      },
                      {
                        "name": "AZURE_COSMOS_CONNECTION_STRING",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.mongoConnectionString.value]"
                      },
                      {
                        "name": "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServiceDocIntelligenceEndpoint.value]"
                      },
                      {
                        "name": "AZURE_DOCUMENT_INTELLIGENCE_KEY",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
                      },
                      {
                        "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appinsights-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.appInsightsConnectionString.value]"
                      }
                    ]
                  },
                  "environmentName": {
                    "value": "[format('managedEnv-{0}-{1}', variables('name'), variables('uniqueSuffix'))]"
                  },
                  "appInsightsWorkspaceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('loganalytics-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.logAnalyticsId.value]"
                  },
                  "workloadProfileName": {
                    "value": "Consumption"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "14372134172221701729"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "containerAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Container App"
                      }
                    },
                    "acrLoginServer": {
                      "type": "string"
                    },
                    "acrContainerImage": {
                      "type": "string",
                      "metadata": {
                        "description": "Container Image for the Container App"
                      }
                    },
                    "acrUsername": {
                      "type": "string",
                      "defaultValue": "",
                      "minLength": 0,
                      "metadata": {
                        "description": "Username for the Azure Container Registry (ACR)"
                      }
                    },
                    "acrPassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "minLength": 0,
                      "metadata": {
                        "description": "Password for the Azure Container Registry (ACR)"
                      }
                    },
                    "containerEnvArray": {
                      "type": "array",
                      "metadata": {
                        "description": "Key value env array for the Container App"
                      }
                    },
                    "environmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Managed Environment"
                      }
                    },
                    "appInsightsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "ID of the Log Analytics Workspace"
                      }
                    },
                    "ingressPort": {
                      "type": "int",
                      "defaultValue": 8501,
                      "metadata": {
                        "description": "Ingress configuration for the Container App."
                      }
                    },
                    "userAssignedIdentityId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional user-assigned identity for the Container App"
                      }
                    },
                    "azdServiceName": {
                      "type": "string",
                      "defaultValue": "streamlit",
                      "metadata": {
                        "description": "Optional service name for tagging resources"
                      }
                    },
                    "workloadProfileName": {
                      "type": "string",
                      "defaultValue": "Consumption",
                      "allowedValues": [
                        "Consumption"
                      ],
                      "metadata": {
                        "description": "SKU name for the Managed Environment. Allowed values: Consumption"
                      }
                    },
                    "streamlitExists": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "variables": {
                    "containerAppNameCleaned": "[toLower(parameters('containerAppName'))]",
                    "environmentNameCleaned": "[toLower(parameters('environmentName'))]",
                    "containerAppJobContributorRoleId": "b9a307c4-5aa3-4b52-ba60-2b17c136cd7b",
                    "registries": "[if(and(not(equals(parameters('acrUsername'), '')), not(equals(parameters('acrPassword'), ''))), createArray(createObject('username', parameters('acrUsername'), 'passwordSecretRef', 'acr-password-secret', 'server', parameters('acrLoginServer'))), if(not(equals(parameters('userAssignedIdentityId'), '')), createArray(createObject('identity', parameters('userAssignedIdentityId'), 'server', parameters('acrLoginServer'))), createArray(createObject('identity', 'system', 'server', parameters('acrLoginServer')))))]",
                    "secrets": "[if(not(equals(parameters('acrPassword'), '')), createArray(createObject('name', 'acr-password-secret', 'value', parameters('acrPassword'))), createArray())]",
                    "ingress": {
                      "external": true,
                      "transport": "Auto",
                      "allowInsecure": false,
                      "targetPort": "[parameters('ingressPort')]",
                      "stickySessions": {
                        "affinity": "none"
                      },
                      "additionalPortMappings": []
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2024-02-02-preview",
                      "name": "[variables('environmentNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "appLogsConfiguration": {
                          "destination": "log-analytics",
                          "logAnalyticsConfiguration": {
                            "customerId": "[reference(parameters('appInsightsWorkspaceId'), '2020-08-01').customerId]",
                            "sharedKey": "[listKeys(parameters('appInsightsWorkspaceId'), '2020-08-01').primarySharedKey]"
                          }
                        },
                        "publicNetworkAccess": "Enabled",
                        "workloadProfiles": [
                          {
                            "name": "[parameters('workloadProfileName')]",
                            "workloadProfileType": "[parameters('workloadProfileName')]"
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.App/jobs",
                      "apiVersion": "2024-02-02-preview",
                      "name": "[format('{0}-job', variables('containerAppNameCleaned'))]",
                      "location": "[parameters('location')]",
                      "identity": "[if(not(equals(parameters('userAssignedIdentityId'), '')), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentityId')), createObject())), createObject('type', 'SystemAssigned'))]",
                      "tags": "[union(parameters('tags'), createObject('azd-service-name', 'jobcontainer'))]",
                      "properties": {
                        "environmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('environmentNameCleaned'))]",
                        "configuration": {
                          "secrets": "[variables('secrets')]",
                          "registries": "[variables('registries')]",
                          "replicaTimeout": 1000,
                          "replicaRetryLimit": 3,
                          "triggerType": "Manual",
                          "manualTriggerConfig": {
                            "replicaCompletionCount": 1,
                            "parallelism": 1
                          },
                          "identitySettings": [
                            {
                              "identity": "[if(not(equals(parameters('userAssignedIdentityId'), '')), parameters('userAssignedIdentityId'), 'system')]",
                              "lifecycle": "All"
                            }
                          ]
                        },
                        "template": {
                          "containers": [
                            {
                              "name": "[format('{0}-job', variables('containerAppNameCleaned'))]",
                              "image": "[if(not(equals(parameters('acrContainerImage'), '')), parameters('acrContainerImage'), if(parameters('streamlitExists'), reference(resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image'), '2022-09-01').outputs.containers.value[0].image, 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'))]",
                              "command": [
                                "/bin/bash"
                              ],
                              "args": [
                                "-c",
                                "python /app/src/pipeline/indexerSetup.py --target '/app'"
                              ],
                              "resources": {
                                "cpu": "[json('2.0')]",
                                "memory": "4Gi"
                              },
                              "env": "[parameters('containerEnvArray')]"
                            }
                          ]
                        },
                        "workloadProfileName": "[parameters('workloadProfileName')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image')]",
                        "[resourceId('Microsoft.App/managedEnvironments', variables('environmentNameCleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(format('{0}-job', variables('containerAppNameCleaned')), variables('containerAppNameCleaned'), 'Container App Jobs Operator')]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('containerAppJobContributorRoleId'))]",
                        "principalId": "[if(not(equals(parameters('userAssignedIdentityId'), '')), if(not(equals(parameters('userAssignedIdentityId'), '')), createObject('principalId', reference(parameters('userAssignedIdentityId'), '2018-11-30').principalId, 'clientId', reference(parameters('userAssignedIdentityId'), '2018-11-30').clientId), createObject()).principalId, reference(resourceId('Microsoft.App/containerApps', variables('containerAppNameCleaned')), '2024-02-02-preview', 'full').identity.principalId)]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.App/jobs', format('{0}-job', variables('containerAppNameCleaned')))]",
                        "[resourceId('Microsoft.App/containerApps', variables('containerAppNameCleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.App/containerApps",
                      "apiVersion": "2024-02-02-preview",
                      "name": "[variables('containerAppNameCleaned')]",
                      "kind": "containerapps",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('azdServiceName')))]",
                      "identity": "[if(not(equals(parameters('userAssignedIdentityId'), '')), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentityId')), createObject())), createObject('type', 'SystemAssigned'))]",
                      "properties": {
                        "environmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('environmentNameCleaned'))]",
                        "configuration": {
                          "secrets": "[variables('secrets')]",
                          "registries": "[variables('registries')]",
                          "activeRevisionsMode": "Single",
                          "ingress": "[variables('ingress')]"
                        },
                        "template": {
                          "containers": [
                            {
                              "name": "[format('{0}-fe', variables('containerAppNameCleaned'))]",
                              "image": "[if(not(equals(parameters('acrContainerImage'), '')), parameters('acrContainerImage'), if(parameters('streamlitExists'), reference(resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image'), '2022-09-01').outputs.containers.value[0].image, 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'))]",
                              "command": [],
                              "args": [],
                              "resources": {
                                "cpu": "[json('2.0')]",
                                "memory": "4Gi"
                              },
                              "env": "[union(parameters('containerEnvArray'), createArray(createObject('name', 'AZURE_CLIENT_ID', 'value', if(not(equals(parameters('userAssignedIdentityId'), createObject())), if(not(equals(parameters('userAssignedIdentityId'), '')), createObject('principalId', reference(parameters('userAssignedIdentityId'), '2018-11-30').principalId, 'clientId', reference(parameters('userAssignedIdentityId'), '2018-11-30').clientId), createObject()).clientId, ''))))]"
                            }
                          ],
                          "scale": {
                            "minReplicas": 0
                          }
                        },
                        "workloadProfileName": "[parameters('workloadProfileName')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'frontend-fetch-image')]",
                        "[resourceId('Microsoft.App/managedEnvironments', variables('environmentNameCleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "frontend-fetch-image",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "exists": {
                            "value": "[parameters('streamlitExists')]"
                          },
                          "name": {
                            "value": "[variables('containerAppNameCleaned')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.32.4.45862",
                              "templateHash": "3099741718515307512"
                            }
                          },
                          "parameters": {
                            "exists": {
                              "type": "bool"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "containers": {
                              "type": "array",
                              "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "containerAppJobName": {
                      "type": "string",
                      "value": "[format('{0}-job', variables('containerAppNameCleaned'))]"
                    },
                    "containerAppClientId": {
                      "type": "string",
                      "value": "[if(not(equals(parameters('userAssignedIdentityId'), '')), if(not(equals(parameters('userAssignedIdentityId'), '')), createObject('principalId', reference(parameters('userAssignedIdentityId'), '2018-11-30').principalId, 'clientId', reference(parameters('userAssignedIdentityId'), '2018-11-30').clientId), createObject()).clientId, reference(resourceId('Microsoft.App/containerApps', variables('containerAppNameCleaned')), '2024-02-02-preview', 'full').identity.principalId)]"
                    },
                    "containerAppIdentityResourceId": {
                      "type": "string",
                      "value": "[if(not(equals(parameters('userAssignedIdentityId'), '')), parameters('userAssignedIdentityId'), reference(resourceId('Microsoft.App/containerApps', variables('containerAppNameCleaned')), '2024-02-02-preview', 'full').identity.tenantId)]"
                    },
                    "containerAppIdentityPrincipalId": {
                      "type": "string",
                      "value": "[if(not(equals(parameters('userAssignedIdentityId'), '')), parameters('userAssignedIdentityId'), reference(resourceId('Microsoft.App/containerApps', variables('containerAppNameCleaned')), '2024-02-02-preview', 'full').identity.principalId)]"
                    },
                    "containerAppEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppNameCleaned')), '2024-02-02-preview').configuration.ingress.fqdn]"
                    },
                    "containerAppId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.App/containerApps', variables('containerAppNameCleaned'))]"
                    },
                    "containerAppName": {
                      "type": "string",
                      "value": "[variables('containerAppNameCleaned')]"
                    },
                    "managedEnvironmentId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.App/managedEnvironments', variables('environmentNameCleaned'))]"
                    },
                    "managedEnvironmentName": {
                      "type": "string",
                      "value": "[variables('environmentNameCleaned')]"
                    },
                    "containerEnvironmentVariables": {
                      "type": "array",
                      "value": "[union(parameters('containerEnvArray'), createArray(createObject('name', 'AZURE_CLIENT_ID', 'value', if(not(equals(parameters('userAssignedIdentityId'), createObject())), if(not(equals(parameters('userAssignedIdentityId'), '')), createObject('principalId', reference(parameters('userAssignedIdentityId'), '2018-11-30').principalId, 'clientId', reference(parameters('userAssignedIdentityId'), '2018-11-30').clientId), createObject()).clientId, ''))))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('appinsights-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('loganalytics-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "AZURE_OPENAI_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
            },
            "AZURE_OPENAI_API_VERSION": {
              "type": "string",
              "value": "[parameters('openAiApiVersion')]"
            },
            "AZURE_OPENAI_EMBEDDING_DEPLOYMENT": {
              "type": "string",
              "value": "[parameters('embeddingModel').name]"
            },
            "AZURE_OPENAI_CHAT_DEPLOYMENT_ID": {
              "type": "string",
              "value": "gpt-4o"
            },
            "AZURE_OPENAI_CHAT_DEPLOYMENT_01": {
              "type": "string",
              "value": "gpt-4o"
            },
            "AZURE_OPENAI_EMBEDDING_DIMENSIONS": {
              "type": "string",
              "value": "[parameters('embeddingModelDimension')]"
            },
            "AZURE_SEARCH_SERVICE_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
            },
            "AZURE_SEARCH_INDEX_NAME": {
              "type": "string",
              "value": "ai-policies-index"
            },
            "AZURE_AI_SEARCH_ADMIN_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServicePrimaryKey.value]"
            },
            "AZURE_AI_SEARCH_SERVICE_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceEndpoint.value]"
            },
            "AZURE_STORAGE_ACCOUNT_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountPrimaryKey.value]"
            },
            "AZURE_BLOB_CONTAINER_NAME": {
              "type": "string",
              "value": "[parameters('storageBlobContainerName')]"
            },
            "AZURE_STORAGE_ACCOUNT_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
            },
            "AZURE_STORAGE_CONNECTION_STRING": {
              "type": "string",
              "value": "[format('ResourceId={0}', reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountId.value)]"
            },
            "AZURE_AI_SERVICES_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesPrimaryKey.value]"
            },
            "AZURE_COSMOS_DB_DATABASE_NAME": {
              "type": "string",
              "value": "priorauthsessions"
            },
            "AZURE_COSMOS_DB_COLLECTION_NAME": {
              "type": "string",
              "value": "temp"
            },
            "AZURE_COSMOS_CONNECTION_STRING": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmosdb-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.mongoConnectionString.value]"
            },
            "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesEndpoint.value]"
            },
            "AZURE_DOCUMENT_INTELLIGENCE_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
            },
            "APPLICATIONINSIGHTS_CONNECTION_STRING": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appinsights-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.appInsightsConnectionString.value]"
            },
            "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.loginServer.value]"
            },
            "AZURE_CONTAINER_ENVIRONMENT_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerapp-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.managedEnvironmentId.value]"
            },
            "AZURE_CONTAINER_ENVIRONMENT_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerapp-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.managedEnvironmentName.value]"
            },
            "AZURE_OPENAI_KEY": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesKey.value]"
            },
            "appIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.clientId.value]"
            },
            "appIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.principalId.value]"
            },
            "appIdentityResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('uai-app-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "registryName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('registry-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.name.value]"
            },
            "containerAppName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerapp-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppName.value]"
            },
            "containerAppEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerapp-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppEndpoint.value]"
            },
            "logAnalyticsId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('loganalytics-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.logAnalyticsId.value]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
            },
            "searchServiceName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
            },
            "openAiServiceName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesName.value]"
            },
            "multiAccountAiServiceName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('multiservice-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesName.value]"
            },
            "docIntelligenceServiceName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence-{0}-{1}-deployment', variables('name'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiServicesName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName')))]"
      ]
    }
  ],
  "outputs": {
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "value": "[format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))]"
    },
    "APP_IDENTITY_CLIENT_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.appIdentityClientId.value]"
    },
    "APP_IDENTITY_RESOURCE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.appIdentityResourceId.value]"
    },
    "REGISTRY_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.registryName.value]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_ENDPOINT.value]"
    },
    "AZURE_OPENAI_API_VERSION": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_API_VERSION.value]"
    },
    "AZURE_OPENAI_EMBEDDING_DEPLOYMENT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT.value]"
    },
    "AZURE_OPENAI_CHAT_DEPLOYMENT_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_CHAT_DEPLOYMENT_ID.value]"
    },
    "AZURE_OPENAI_CHAT_DEPLOYMENT_01": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_CHAT_DEPLOYMENT_01.value]"
    },
    "AZURE_OPENAI_EMBEDDING_DIMENSIONS": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_EMBEDDING_DIMENSIONS.value]"
    },
    "AZURE_SEARCH_SERVICE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_SEARCH_SERVICE_NAME.value]"
    },
    "AZURE_SEARCH_INDEX_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_SEARCH_INDEX_NAME.value]"
    },
    "AZURE_AI_SEARCH_ADMIN_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_AI_SEARCH_ADMIN_KEY.value]"
    },
    "AZURE_BLOB_CONTAINER_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_BLOB_CONTAINER_NAME.value]"
    },
    "AZURE_STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_STORAGE_ACCOUNT_NAME.value]"
    },
    "AZURE_STORAGE_ACCOUNT_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_STORAGE_ACCOUNT_KEY.value]"
    },
    "AZURE_STORAGE_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_STORAGE_CONNECTION_STRING.value]"
    },
    "AZURE_AI_SERVICES_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_AI_SERVICES_KEY.value]"
    },
    "AZURE_COSMOS_DB_DATABASE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_COSMOS_DB_DATABASE_NAME.value]"
    },
    "AZURE_COSMOS_DB_COLLECTION_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_COSMOS_DB_COLLECTION_NAME.value]"
    },
    "AZURE_COSMOS_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_COSMOS_CONNECTION_STRING.value]"
    },
    "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT.value]"
    },
    "AZURE_DOCUMENT_INTELLIGENCE_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_DOCUMENT_INTELLIGENCE_KEY.value]"
    },
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.APPLICATIONINSIGHTS_CONNECTION_STRING.value]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_CONTAINER_REGISTRY_ENDPOINT.value]"
    },
    "AZURE_CONTAINER_ENVIRONMENT_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_CONTAINER_ENVIRONMENT_ID.value]"
    },
    "AZURE_OPENAI_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_OPENAI_KEY.value]"
    },
    "CONTAINER_APP_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}-{2}', parameters('priorAuthName'), parameters('location'), parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.containerAppName.value]"
    }
  }
}
