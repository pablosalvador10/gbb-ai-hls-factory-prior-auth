name: Code Quality and Tests 🚀

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches:
      - main
      - staging


jobs:
  quality-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code 🛎️
        uses: actions/checkout@v2

      - name: Setup Conda 🔧
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: environment.yaml # Create an environment.yml file
          activate-environment: 'pa-ai-env'
          python-version: '3.10'
          auto-activate-base: false

      - name: Activate Conda Node 🔧
        shell: bash -el {0}
        run: |
          conda info
          conda list
          conda install -c anaconda click

          # pip install -r requirements.txt
          # pip install -r requirements-codequality.txt

      - name: Setup Node 🔧
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Run isort Check 🧹
        shell: bash -el {0}
        run: isort --check-only --profile black .

      - name: Run Black Check 🌚
        shell: bash -el {0}
        run: black --check --config pyproject.toml .

      - name: Run flake8 ✅
        shell: bash -el {0}
        run: flake8 . --extend-ignore E501 --config pyproject.toml --max-line-length=124

      # Commenting out due to conflicting formatting/linting with black
      # - name: Run ruff Check 🧼
      #   shell: bash -el {0}
      #   run: ruff --fix --exit-non-zero-on-fix .

      - name: Run interrogate Check 🔍
        shell: bash -el {0}
        run: interrogate src -v -i --fail-under=60 -e '**/__init__.py'

      - name: Bandit Security Linter Check 🔒
        shell: bash -el {0}
        run: bandit -c pyproject.toml -r .

      - name: Run Pytest 🧪
        shell: bash -el {0}
        run: pytest tests/

  # deployment:
  #   name: deploy
  #   runs-on: ubuntu-latest
  #   needs: quality-checks
  #   steps:
  #     - name: Deploy to production
  #       run: echo deploying
